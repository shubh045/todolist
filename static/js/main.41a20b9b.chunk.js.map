{"version":3,"sources":["TodoForm.js","Todo.js","RemovedTodo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","task","setTask","onSubmit","e","preventDefault","id","Math","floor","random","text","className","type","value","name","placeholder","onChange","target","Todo","todos","removeTodo","onItemClick","removeDoneTodo","updateTodo","donetodo","edit","setEdit","values","setValues","handleToggle","handleClick","item","map","todo","index","onClick","RemovedTodo","doneTodo","setDoneTodo","removeArr","filter","prev","TodoList","setTodos","newTodos","todoId","newValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41a20b9b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './style.css';\r\n\r\nfunction TodoForm(props) {\r\n    const [task, setTask] = useState('');\r\n\r\n    const handleChange = e => {\r\n        setTask(e.target.value);\r\n        \r\n    }\r\n\r\n      const handleSubmit = (e) => {\r\n         e.preventDefault();\r\n         if(!task) return;\r\n          props.onSubmit({\r\n            id: Math.floor(Math.random()*1000),\r\n            text: task\r\n         })\r\n        \r\n         setTask('');\r\n     }\r\n\r\n    return (\r\n        \r\n         <form onSubmit={handleSubmit} className='todo-form'>\r\n            <input \r\n            type='text' \r\n            value={task} \r\n            name='text' \r\n            placeholder='Enter Task'\r\n            onChange={handleChange} \r\n            className='input-field'\r\n            />\r\n\r\n            <button className='btn' type='submit'>ADD</button>\r\n         </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react';\r\n// import RemovedTodo from './RemovedTodo';\r\n import TodoForm from './TodoForm';\r\n import './style.css';\r\n\r\nfunction Todo({todos, removeTodo, onItemClick, removeDoneTodo, updateTodo, donetodo}) {\r\nconst [edit, setEdit] = useState({\r\n  id: null , \r\n  value: ''\r\n});\r\n\r\nconst [values, setValues] = useState(false);\r\n \r\n    const handleToggle = () => {\r\n      // let val = !values;\r\n      //   setValues(val); \r\n      \r\n        \r\n        setValues(values => !values); \r\n      \r\n    }\r\n     \r\n\r\nconst handleClick = ({target}) => {\r\n  const item = target.value;\r\n  // const ide= target.values.id;\r\n  // if(!values===true) onItemClick(item);\r\n  // else removeDoneTodo(item);\r\n  \r\n    if(!values===true) onItemClick(item);\r\n    else removeDoneTodo(item);\r\n  \r\n   } \r\n\r\n   const submitUpdate = value => {\r\n     updateTodo(edit.id, value);\r\n     setEdit({\r\n       id: null, \r\n       value: ''\r\n     });\r\n   }\r\n\r\n   if(edit.id) {\r\n      return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n    return todos.map((todo, index) => (\r\n      <div>\r\n        \r\n        <div className='todo' id='to-f'>\r\n\r\n            <div id={todo.id}>\r\n\r\n            <input \r\n            type='checkBox' \r\n            key={todo.id} \r\n            value={todo.text} \r\n            name={todo.text}\r\n             onClick={handleToggle}\r\n            onChange={handleClick} \r\n             />\r\n\r\n            {todo.text} \r\n            </div>\r\n\r\n          <div className='re-btn'>\r\n              <button id='r-btn' onClick={() => removeTodo(todo.id)}>X</button>\r\n\r\n              <button id='e-btn' onClick={() => setEdit({\r\n                id: todo.id,\r\n                value: todo.text\r\n              })}> Edit </button>\r\n          </div>\r\n        </div>\r\n      \r\n        \r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react';\r\nimport Todo from './Todo';\r\n import './style.css';\r\n\r\nfunction RemovedTodo({removeTodo, todos, updateTodo}) {\r\n\r\n    const [doneTodo, setDoneTodo] = useState([]);\r\n\r\n    const handleTodo = (todo) => {\r\n        setDoneTodo(prev => [todo, ...prev]);\r\n        // completeTodo(todo.id);\r\n    }\r\n\r\n    const removeDoneTodo = id => {\r\n        const removeArr = [...doneTodo].filter((todo, index) => todo !== id);\r\n        setDoneTodo(removeArr);\r\n    }\r\n    \r\n    return (\r\n        <div className='remove-todo'>\r\n            <Todo \r\n            todos={todos} \r\n            removeTodo={removeTodo} \r\n            onItemClick={handleTodo} \r\n            removeDoneTodo={removeDoneTodo} \r\n            updateTodo={updateTodo}\r\n            doneTodo={doneTodo}  \r\n            />\r\n\r\n            <h1 className='h1'>Completed Tasks</h1>\r\n\r\n           { [...doneTodo].map((item, index)  => (\r\n                <ul key={index} >\r\n                    <div className='r-ul'>\r\n                    <li>\r\n                        {item}\r\n                        <button id='button' type='button' onClick={() => removeDoneTodo(item)}>X</button>\r\n                    </li>\r\n                    </div>\r\n                </ul>\r\n                \r\n        ))}\r\n        \r\n          </div>\r\n          \r\n)}\r\n           \r\nexport default RemovedTodo;\r\n","import React, {useState} from 'react'\r\nimport RemovedTodo from './RemovedTodo';\r\n//  import Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n import './style.css';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    // const handleClick = ({target}) => {\r\n    //  const item = target.value;\r\n    //  handleTodo(item)\r\n    // }\r\n\r\n    const addTodos = todo => {\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n         if(!newValue.text) return;\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id);\r\n    setTodos(removeArr);\r\n}\r\n\r\n    // const completeTodo = id => {\r\n    //   let updatedTodos = todos.map((todo) => {\r\n    //       if(todo.id === id) {\r\n    //           todo.isComplete = !todo.isComplete;\r\n    //       }\r\n    //       return todo;\r\n    //   })\r\n    //   return setTodos(updatedTodos);\r\n    // }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        \r\n        <div className='todo-list'>\r\n            <h1 className='h1'>Tasks to do</h1>\r\n            <TodoForm onSubmit={addTodos} />\r\n            <RemovedTodo \r\n            todos={todos} \r\n            removeTodo={removeTodo} \r\n            updateTodo={updateTodo}  \r\n            />\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n"," import React from 'react'\nimport TodoList from './TodoList'\nimport './style.css'\n\n function App() {\n   return (\n     <div className='body'>\n       <TodoList />\n     </div>\n   )\n }\n \n export default App\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}